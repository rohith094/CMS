Application number (function generated)
AdmissionNo (autogenerated)
RegistrationNo(autogenerated)
RegistrationID (function generated after registration)(jntuno in future )

Joiningdate (current data)
FirstName
MiddleName
LastName
mobile
alternatemobile
email
gender
dob
branch (fetched)
joining year
quota
admissiontype
Fathername
Mothername
scholarshipholder
moa





CREATE TABLE studentinfo (
    stdid INT UNIQUE AUTO_INCREMENT,
    applicationnumber VARCHAR(20) UNIQUE,
    admissionnumber VARCHAR(20) UNIQUE,
    registrationid VARCHAR(20) PRIMARY KEY,
    joiningdate DATE,
    firstname VARCHAR(50),
    middlename VARCHAR(50),
    lastname VARCHAR(50),
    studentaadhar VARCHAR(12),
    mobile VARCHAR(15),
    alternatemobile VARCHAR(15),
    personalemail VARCHAR(50),
    gender VARCHAR(10),
    dob DATE,
    branch VARCHAR(50),
    joiningyear INT,
    quota VARCHAR(50),
    admissiontype VARCHAR(50),
    fathername VARCHAR(50),
    mothername VARCHAR(50),
    fatheraadhar VARCHAR(12),
    motheraadhar VARCHAR(12),
    scholarshipholder varchar(20),
    presentaddress TEXT,
    presentpincode VARCHAR(10),
    currentaddress TEXT,
    currentpincode VARCHAR(10),
    moa VARCHAR(50),
    remarks text,
    entrancetype varchar(10),
    entrancehallticket varchar(50),
    rank varchar(50),
    city varchar(50),
    state varchar(50),
    nationality varchar(50),
    religion varchar(20),
    caste varchar(20),
    castecategory varchar(20)
);		

CREATE TABLE semesters (
    semesterid INT Unique AUTO_INCREMENT,
    semesternumber INT primary key NOT NULL,
    semestername VARCHAR(255) NOT NULL,
    startdate DATE NOT NULL,
    enddate DATE NOT NULL,
    batchyear int not null,
    semesteractive int NOT NULL );


CREATE TABLE branches (
    branchid INT UNIQUE AUTO_INCREMENT,
    branchcode VARCHAR(20) PRIMARY KEY NOT NULL,
    branchname VARCHAR(100) NOT NULL,
    hodname VARCHAR(100),
    blocknumber INT,
    branchshortcut VARCHAR(20)
);


CREATE TABLE courses (
    courseid INT UNIQUE AUTO_INCREMENT,
    coursecode VARCHAR(20) PRIMARY KEY NOT NULL,
    coursename VARCHAR(255) NOT NULL,
    alternativename varchar(255),
    coursedescription text,
    coursetype varchar(50),
    coursecredits float NOT NULL,
    learninghours float not null,
    totalcoursecredits float not null,
    branchcode varchar(20)
);









import React, { useState } from 'react';
import * as XLSX from 'xlsx';
import axios from 'axios';
import Cookies from 'js-cookie';
import { toast } from 'react-toastify';

const BulkUpdateComponent = () => {
  const [selectedFields, setSelectedFields] = useState([]);
  const [excelData, setExcelData] = useState([]);
  const [fileName, setFileName] = useState('');

  const studentFields = [
    'joiningdate', 'nameasperssc', 'studentaadhar', 'mobile', 'alternatemobile',
    'personalemail', 'gender', 'dob', 'branch', 'joiningyear', 'quota',
    'admissiontype', 'fathername', 'mothername', 'fatheraadhar', 'motheraadhar',
    'scholarshipholder', 'permanentaddress', 'permanentpincode', 'currentaddress',
    'currentpincode', 'moa', 'remarks', 'entrancetype', 'entrancehallticket', 'rank',
    'city', 'state', 'nationality', 'religion', 'caste', 'castecategory', 'studentstatus'
  ];

  const handleFieldSelection = (field) => {
    setSelectedFields(prev => 
      prev.includes(field) 
        ? prev.filter(f => f !== field) 
        : [...prev, field]
    );
  };

  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    setFileName(file.name);
    const reader = new FileReader();
    reader.onload = (event) => {
      const binaryStr = event.target.result;
      const workbook = XLSX.read(binaryStr, { type: 'binary' });
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];
      const data = XLSX.utils.sheet_to_json(sheet);
      setExcelData(data);
    };
    reader.readAsBinaryString(file);
  };

  const handleBulkUpdate = async () => {
    try {
      const token = Cookies.get('admintoken'); // Get the token from cookies

      if (!token) {
        alert('Authorization token is missing!');
        return;
      }

      const formData = new FormData();
      formData.append('excelFile', new Blob([XLSX.write(XLSX.utils.json_to_sheet(excelData), {bookType: 'xlsx', type: 'array'})], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}));
      
      await axios.put('http://localhost:3001/admin/students/bulkupdate', formData, {
        headers: { 
          'Content-Type': 'multipart/form-data',
          'Authorization': `${token}` // Add the authorization header
        }
      });

      toast.success('Bulk update successful!');
    } catch (error) {
      console.error('Bulk update failed:', error);
      toast.error('Bulk update failed!');
    }
  };

  return (
    <div className="p-6 bg-gray-100 min-h-screen flex flex-col items-center">
      <h2 className="text-2xl font-bold mb-6">Bulk Update Students</h2>

      <div className="bg-white p-6 rounded-lg shadow-md w-full max-w-4xl">
        <h3 className="text-xl font-semibold mb-4">Select Fields to Update</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-6">
          {studentFields.map((field, index) => (
            <label key={index} className="inline-flex items-center">
              <input
                type="checkbox"
                className="form-checkbox h-5 w-5 text-blue-600"
                onChange={() => handleFieldSelection(field)}
                checked={selectedFields.includes(field)}
              />
              <span className="ml-2 text-gray-700">{field}</span>
            </label>
          ))}
        </div>

        <input
          type="file"
          accept=".xlsx, .xls"
          onChange={handleFileUpload}
          className="mb-4"
        />

        {fileName && (
          <div className="bg-gray-50 p-4 rounded-lg shadow-inner mb-6">
            <h4 className="text-lg font-medium mb-2">Preview: {fileName}</h4>
            <table className="min-w-full bg-white">
              <thead>
                <tr>
                  {selectedFields.map((field, index) => (
                    <th key={index} className="py-2 px-4 border-b text-left">{field}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {excelData.map((row, rowIndex) => (
                  <tr key={rowIndex}>
                    {selectedFields.map((field, index) => (
                      <td key={index} className="py-2 px-4 border-b">{row[field] || ''}</td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        <button
          onClick={handleBulkUpdate}
          className="w-full py-2 px-4 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 transition duration-300"
        >
          Update Students
        </button>
      </div>
    </div>
  );
};

export default BulkUpdateComponent;

